package com.shoppingwithfriends.shoppingwithfriends;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteOpenHelper;import android.util.Log;import java.util.ArrayList;import java.util.Calendar;import java.util.List;@SuppressWarnings("WeakerAccess")public class DatabaseHandler extends SQLiteOpenHelper {    // All Static variables    // Database Version    private static final int DATABASE_VERSION = 4;    // Database Name    private static final String DATABASE_NAME = "swfManager";    // table names    private static final String TABLE_USERS = "users";    private static final String TABLE_FRIENDS = "friends";    private static final String TABLE_ITEM_REQUEST = "items_requested";    private static final String TABLE_ITEM_FOUND = "items_found";    // common column names    private static final String KEY_ID = "id";    // users Table Columns names    private static final String KEY_NAME = "name";    private static final String KEY_UN = "username";    private static final String KEY_EMAIL = "email";    private static final String KEY_PW = "password";    private static final String KEY_NUM_REP = "numReports";    private static final String KEY_RATE = "rating";    private static final String KEY_ADMIN = "isAdmin";    private static final String KEY_LOCK = "isLocked";    // friends table column names    private static final String KEY_BASE = "base";    private static final String KEY_FRIEND = "friend";    // items table column names price, name, user, location    private static final String KEY_UID = "userId";    private static final String KEY_ITEM_NAME = "itemName";    private static final String KEY_MAX_PRICE = "maxPrice";    private static final String KEY_LOCATION = "location";    private static final String KEY_EXPIRATION = "expiration";    public DatabaseHandler(Context context) {        super(context, DATABASE_NAME, null, DATABASE_VERSION);    }    /**     * Creates databases with two tables     * @param db     */    @SuppressWarnings("JavaDoc")    @Override    public void onCreate(SQLiteDatabase db) {        String CREATE_USERS_TABLE = "CREATE TABLE " + TABLE_USERS + "("                + KEY_ID + " INTEGER PRIMARY KEY," + KEY_NAME + " TEXT,"                + KEY_UN + " TEXT," + KEY_PW + " TEXT," + KEY_EMAIL + " TEXT,"                + KEY_RATE + " INTEGER," + KEY_NUM_REP + " INTEGER," + KEY_ADMIN + " BOOLEAN,"                + KEY_LOCK + " BOOLEAN" + ")";        String CREATE_FRIENDS_TABLE = "CREATE TABLE " + TABLE_FRIENDS + "("                + KEY_ID + " INTEGER PRIMARY KEY," + KEY_BASE + " INTEGER,"                + KEY_FRIEND + " INTEGER" + ")";        String CREATE_ITEM_REQUEST_TABLE = "CREATE TABLE " + TABLE_ITEM_REQUEST + "("                + KEY_ID + " INTEGER PRIMARY KEY," + KEY_UID + " INTEGER,"                + KEY_ITEM_NAME + " TEXT," + KEY_MAX_PRICE + " INTEGER," + KEY_LOCATION                + " TEXT" + ")";        String CREATE_ITEM_FOUND_TABLE = "CREATE TABLE " + TABLE_ITEM_FOUND + "("                + KEY_ID + " INTEGER PRIMARY KEY," + KEY_UID + " INTEGER,"                + KEY_ITEM_NAME + " TEXT," + KEY_MAX_PRICE + " INTEGER," + KEY_LOCATION                + " TEXT," + KEY_EXPIRATION + " INTEGER" + ")";        db.execSQL(CREATE_USERS_TABLE);        db.execSQL(CREATE_FRIENDS_TABLE);        db.execSQL(CREATE_ITEM_REQUEST_TABLE);        db.execSQL(CREATE_ITEM_FOUND_TABLE);    }    /**     * upgrades database     * @param db db to be upgraded     * @param oldVersion old version     * @param newVersion new version     */    @Override    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {        // Drop older table if existed        db.execSQL("DROP TABLE IF EXISTS " + TABLE_USERS);        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FRIENDS);        db.execSQL("DROP TABLE IF EXISTS " + TABLE_ITEM_REQUEST);        db.execSQL("DROP TABLE IF EXISTS " + TABLE_ITEM_FOUND);        // Create tables again        onCreate(db);    }    /**     * All CRUD(Create, Read, Update, Delete) Operations     */    /**     * Add user to the database     * @param user user to be added     */    void addUser(User user) {        SQLiteDatabase db = this.getWritableDatabase();        ContentValues values = new ContentValues();        values.put(KEY_NAME, user.getName()); // user Name        values.put(KEY_UN, user.getUsername()); // user username        values.put(KEY_PW, user.getPassword()); // user pw        values.put(KEY_EMAIL, user.getEmail()); // user email        values.put(KEY_RATE, 0);        values.put(KEY_NUM_REP, 0);        values.put(KEY_ADMIN, 0);        values.put(KEY_LOCK, 0);        // Inserting Row        db.insert(TABLE_USERS, null, values);        db.close(); // Closing database connection    }    /**     * returns user from id     * @param id     * @return user     */    @SuppressWarnings("JavaDoc")    public User getUser(int id) {        SQLiteDatabase db = this.getReadableDatabase();        Cursor cursor = db.query(TABLE_USERS, new String[] { KEY_ID,                        KEY_NAME, KEY_UN, KEY_PW, KEY_EMAIL, KEY_RATE, KEY_NUM_REP,                        KEY_ADMIN, KEY_LOCK}, KEY_ID + "=?",                new String[] { String.valueOf(id) }, null, null, null, null);        if (cursor != null)            cursor.moveToFirst();        User user = new User(Integer.parseInt(cursor.getString(0)),                cursor.getString(1), cursor.getString(2), cursor.getString(3), cursor.getString(4),                Integer.parseInt(cursor.getString(5)), Integer.parseInt(cursor.getString(6)),                Integer.parseInt(cursor.getString(7)), Integer.parseInt(cursor.getString(8)));        cursor.close();        db.close();        return user;    }    /**     * return a list of all users     * @return list of all users     */    public List<User> getAllUsers() {        List<User> userList = new ArrayList<>();        // Select All Query        String selectQuery = "SELECT  * FROM " + TABLE_USERS;        SQLiteDatabase db = this.getWritableDatabase();        Cursor cursor = db.rawQuery(selectQuery, null);        // looping through all rows and adding to list        if (cursor.moveToFirst()) {            do {                User user = new User();                user.setId(Integer.parseInt(cursor.getString(0)));                user.setName(cursor.getString(1));                user.setUsername(cursor.getString(2));                user.setPassword(cursor.getString(3));                user.setEmail(cursor.getString(4));                user.setRating(Integer.parseInt(cursor.getString(5)));                user.setNumReports(Integer.parseInt(cursor.getString(6)));                user.setIsLocked(Integer.parseInt(cursor.getString(7)) == 1);                user.setIsAdmin(Integer.parseInt(cursor.getString(8))==1);                // Adding user to list                userList.add(user);            } while (cursor.moveToNext());        }        // return user list        return userList;    }    /**     * updates a given user in the database     * @param user user to be updated     * @return number of rows affected     */    public int updateUser(User user) {        SQLiteDatabase db = this.getWritableDatabase();        ContentValues values = new ContentValues();        values.put(KEY_NAME, user.getName()); // Contact Name        values.put(KEY_UN, user.getUsername()); // Contact username        values.put(KEY_PW, user.getPassword()); // Contact pw        values.put(KEY_EMAIL, user.getEmail()); // Contact email        values.put(KEY_RATE, user.getRating());        values.put(KEY_NUM_REP, user.getNumReports());        values.put(KEY_ADMIN, user.getIsAdmin());        values.put(KEY_LOCK, user.getIsLocked());        // updating row        return db.update(TABLE_USERS, values, KEY_ID + " = ?",                new String[] { String.valueOf(user.getId()) });    }    /**     * deleted a single user     * @param user user to be deleted     */    public void deleteUser(User user) {        SQLiteDatabase db = this.getWritableDatabase();        db.delete(TABLE_USERS, KEY_ID + " = ?",                new String[] { String.valueOf(user.getId()) });        db.close();    }    /**     * gets count of users     * @return number of users     */    public int getUsersCount() {        String countQuery = "SELECT  * FROM " + TABLE_USERS;        SQLiteDatabase db = this.getReadableDatabase();        Cursor cursor = db.rawQuery(countQuery, null);        cursor.close();        // return count        return cursor.getCount();    }    /**     * checks the username is in the db     * @param username username to be checked     * @return true if its in the system     */    public boolean checkUser(String username) {        String selectQuery = "SELECT  * FROM " + TABLE_USERS + " WHERE " + KEY_UN + " = \'"                + username + "\'";        SQLiteDatabase db = this.getReadableDatabase();        Cursor cursor = db.rawQuery(selectQuery, null);        boolean exists = cursor.moveToFirst();        cursor.close();        return exists;    }    //Begin Friend table methods    /**     * adds a friend to the friend table     * @param base user with a friend     * @param friend new friend of the user     */    void addFriend(User base, User friend) {        SQLiteDatabase db = this.getWritableDatabase();        ContentValues values = new ContentValues();        values.put(KEY_BASE, base.getId()); // user Name        values.put(KEY_FRIEND, friend.getId()); // user username        // Inserting Row        db.insert(TABLE_FRIENDS, null, values);        db.close(); // Closing database connection    }    /**     * returns all friends of a user     * @param user user to get friends of     * @return list of friends of user     */    public List<User> getAllFriends(User user) {        int id = user.getId();        List<User> friendList = new ArrayList<>();        // select friends of a user from table        String friendQuery = "SELECT  * FROM " + TABLE_FRIENDS + " WHERE "                + KEY_BASE + " = \'" + id + "\'";        SQLiteDatabase db = this.getWritableDatabase();        Cursor cursor = db.rawQuery(friendQuery, null);        // looping through all rows of friends        if (cursor.moveToFirst()) {            do {                //get each friend from the user table                String friendId = (cursor.getString(2));                String selectQuery = "SELECT  * FROM " + TABLE_USERS + " WHERE "                        + KEY_ID + " = " + friendId;                SQLiteDatabase userDb = this.getWritableDatabase();                Cursor userCursor = userDb.rawQuery(selectQuery, null);                //add friend to list                if (userCursor.moveToFirst()) {                    User friend = new User();                    friend.setId(Integer.parseInt(userCursor.getString(0)));                    friend.setName(userCursor.getString(1));                    friend.setUsername(userCursor.getString(2));                    friend.setPassword(userCursor.getString(3));                    friend.setEmail(userCursor.getString(4));                    friend.setRating(Integer.parseInt(userCursor.getString(5)));                    friend.setNumReports(Integer.parseInt(userCursor.getString(6)));                    friend.setIsLocked(Integer.parseInt(userCursor.getString(7)) == 1);                    friend.setIsAdmin(Integer.parseInt(userCursor.getString(8))==1);                    // Adding friend to list                    friendList.add(friend);                }                userCursor.close();                userDb.close();            } while (cursor.moveToNext());        }        cursor.close();        db.close();        // return friend list        return friendList;    }    /**     * deleted a row from the friend database     * @param user user to be deleted     * @param friend friend to be deleted     */    public void deleteFriend(User user, User friend) {        SQLiteDatabase db = this.getWritableDatabase();        db.delete(TABLE_FRIENDS, KEY_BASE + " = ? AND " + KEY_FRIEND + " = ?",                new String[] { String.valueOf(user.getId()), String.valueOf(friend.getId()) });        db.close();    }    //begin item request table methods    /**     * Adds an item request to the database     * @param item the item request to be added     */    void addItemRequest(Item item) {        SQLiteDatabase db = this.getWritableDatabase();        ContentValues values = new ContentValues();        values.put(KEY_UID, item.getPoster().getId()); // user Name        values.put(KEY_ITEM_NAME, item.getName()); // user username        values.put(KEY_MAX_PRICE, item.getPrice());        values.put(KEY_LOCATION, item.getLocation());        // Inserting Row        db.insert(TABLE_ITEM_REQUEST, null, values);        db.close(); // Closing database connection    }    /**     * returns an item request given the id     * @param id the id of the item request     * @return the item request     */    public Item getItemRequest(int id) {        SQLiteDatabase db = this.getReadableDatabase();        Cursor cursor = db.query(TABLE_ITEM_REQUEST, new String[] { KEY_ID,                KEY_UID, KEY_ITEM_NAME, KEY_MAX_PRICE, KEY_LOCATION}, KEY_ID + "=?",                new String[] { String.valueOf(id) }, null, null, null, null);        if (cursor != null)            cursor.moveToFirst();        Item item = new Item(getUser(Integer.parseInt(cursor.getString(1))),                cursor.getString(2), Integer.parseInt(cursor.getString(3)), cursor.getString(4),                Integer.parseInt(cursor.getString(5)));        item.setPostId(Integer.parseInt(cursor.getString(0)));        cursor.close();        db.close();        return item;    }    /**     * returns a list of item requests     * @param user the user that posted the item requests     * @return a list of item requests     */    public List<Item> getItemsRequestedByUser(User user) {        int id = user.getId();        List<Item> itemList = new ArrayList<>();        // select friends of a user from table        String itemQuery = "SELECT  * FROM " + TABLE_ITEM_REQUEST + " WHERE "                + KEY_UID + " = \'" + id + "\'";        SQLiteDatabase db = this.getWritableDatabase();        Cursor cursor = db.rawQuery(itemQuery, null);        // looping through all rows of friends        if (cursor.moveToFirst()) {            do {                Item ir = new Item();                ir.setPostId(Integer.parseInt(cursor.getString(0)));                ir.setPoster(user);                ir.setName(cursor.getString(2));                ir.setPrice(Integer.parseInt(cursor.getString(3)));                ir.setLocation(cursor.getString(4));                itemList.add(ir);            } while (cursor.moveToNext());        }        cursor.close();        db.close();        // return friend list        return itemList;    }    /**     * Deletes the item request from the database     * @param id the id of the request     */    public void deleteRequest(int id) {        SQLiteDatabase db = this.getWritableDatabase();        db.delete(TABLE_ITEM_REQUEST, KEY_ID + " = ?",                new String[] {String.valueOf(id)});        db.close();    }    //begin item found table methods    /**     * Adds an item request to the database     * @param item the item request to be added     */    void addItemFoundPost(Item item) {        SQLiteDatabase db = this.getWritableDatabase();        ContentValues values = new ContentValues();        values.put(KEY_UID, item.getPoster().getId()); // user Name        values.put(KEY_ITEM_NAME, item.getName()); // user username        values.put(KEY_MAX_PRICE, item.getPrice());        values.put(KEY_LOCATION, item.getLocation());        values.put(KEY_EXPIRATION, item.getExpiration());        User.currentUser.setNumReports(User.currentUser.getNumReports() + 1);        // Inserting Row        db.insert(TABLE_ITEM_FOUND, null, values);        db.close(); // Closing database connection    }    /**     * returns an item request given the id     * @param id the id of the item request     * @return the item request     */    public Item getItemFoundPost(int id) {        SQLiteDatabase db = this.getReadableDatabase();        Cursor cursor = db.query(TABLE_ITEM_FOUND, new String[] { KEY_ID,                        KEY_UID, KEY_ITEM_NAME, KEY_MAX_PRICE, KEY_LOCATION, KEY_EXPIRATION}, KEY_ID + "=?",                new String[] { String.valueOf(id) }, null, null, null, null);        if (cursor != null)            cursor.moveToFirst();        Item item = new Item(getUser(Integer.parseInt(cursor.getString(1))),                cursor.getString(2), Integer.parseInt(cursor.getString(3)), cursor.getString(4),                Integer.parseInt(cursor.getString(5)));        item.setPostId(Integer.parseInt(cursor.getString(0)));        cursor.close();        db.close();        return item;    }    /**     * returns a list of items found     * @param user the user that posted the item requests     * @return a list of items found     */    public List<Item> getItemsFoundByUser(User user) {        int id = user.getId();        List<Item> itemList = new ArrayList<>();        // select friends of a user from table        String itemQuery = "SELECT  * FROM " + TABLE_ITEM_FOUND + " WHERE "                + KEY_UID + " = \'" + id + "\'";        SQLiteDatabase db = this.getWritableDatabase();        Cursor cursor = db.rawQuery(itemQuery, null);        // looping through all rows of friends        if (cursor.moveToFirst()) {            do {                Item ir = new Item();                ir.setPostId(Integer.parseInt(cursor.getString(0)));                ir.setPoster(user);                ir.setName(cursor.getString(2));                ir.setPrice(Integer.parseInt(cursor.getString(3)));                ir.setLocation(cursor.getString(4));                ir.setExpiration(Integer.parseInt(cursor.getString(5)));                itemList.add(ir);            } while (cursor.moveToNext());        }        cursor.close();        db.close();        // return friend list        return itemList;    }    /**     * Deletes the item found from the database     * @param id the id of the request     */    public void deleteItemFound(int id) {        SQLiteDatabase db = this.getWritableDatabase();        db.delete(TABLE_ITEM_FOUND, KEY_ID + " = ?",                new String[] {String.valueOf(id)});        db.close();    }    /**     * Gets the user's list of friends, finds all reports made by friends of that user,     * gets the user's items requested, and compares the names and prices of all of them, returning     * matches.     *     * @param user the current user     * @return a list of friend's item reports that have names that matches the user's request     */    public List<Item> getMatches(User user) {        int id = user.getId();        List<Item> itemsFound = new ArrayList<>();        // select friends of a user from table        String itemsFoundQuery = "SELECT  * FROM " + TABLE_ITEM_FOUND + " WHERE "                + KEY_UID + " = (SELECT " + KEY_FRIEND + " FROM " + TABLE_FRIENDS + " WHERE " +                KEY_BASE + " = \'" + id + "\')";        SQLiteDatabase db = this.getWritableDatabase();        Cursor cursor = db.rawQuery(itemsFoundQuery, null);        // looping through all rows of items        if (cursor.moveToFirst()) {            do {                Item ir = new Item();                ir.setPostId(Integer.parseInt(cursor.getString(0)));                ir.setPoster(user);                ir.setName(cursor.getString(2));                ir.setPrice(Integer.parseInt(cursor.getString(3)));                ir.setLocation(cursor.getString(4));                ir.setExpiration(((Integer.parseInt(cursor.getString(5)))));                itemsFound.add(ir);            } while (cursor.moveToNext());        }        cursor.close();        db.close();        List<Item> itemRequests = getItemsRequestedByUser(user);        List<Item> itemMatches = new ArrayList<>();        for (Item ir : itemRequests) {            for (Item itemFound : itemsFound) {                Calendar c = Calendar.getInstance();                String year = Integer.toString(c.get(Calendar.YEAR));                String month = Integer.toString(c.get(Calendar.MONTH));                if (month.length() == 1)                    month = "0" + month;                String day = Integer.toString(c.get(Calendar.DAY_OF_MONTH));                if (day.length() == 1)                    day = "0" + day;                String dateString = year + month + day;                int date = Integer.parseInt(dateString);                Log.d("ok", date + "\n");                Log.d("ok", itemFound.getExpiration() +  "\n");                if (itemFound.getName().equals(ir.getName())                        && ir.getPrice() >= itemFound.getPrice()                        && itemFound.getExpiration() >= date) {                    itemMatches.add(itemFound);                }            }        }        return itemMatches;    }}